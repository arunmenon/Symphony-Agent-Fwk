#!/usr/bin/env python
"""Visualize taxonomy as an interactive HTML tree view."""

import os
import json
import argparse
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# HTML template for visualization
HTML_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} Taxonomy Visualization</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }}
        .metadata {{
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 20px;
            font-size: 0.9em;
        }}
        .metadata-item {{
            margin: 5px 0;
        }}
        .tree {{
            margin-top: 20px;
        }}
        .tree ul {{
            list-style-type: none;
            padding-left: 20px;
        }}
        .tree li {{
            padding: 5px 0;
        }}
        .tree .category {{
            font-weight: bold;
            cursor: pointer;
            color: #2c3e50;
        }}
        .tree .category:hover {{
            text-decoration: underline;
        }}
        .tree .category::before {{
            content: "▶ ";
            font-size: 0.8em;
            color: #7f8c8d;
        }}
        .tree .category.open::before {{
            content: "▼ ";
        }}
        .tree .subcategories {{
            display: none;
        }}
        .tree .open + .subcategories {{
            display: block;
        }}
        .compliance, .legal {{
            font-size: 0.85em;
            margin-top: 5px;
            padding: 5px;
            border-radius: 3px;
        }}
        .compliance {{
            background-color: #e8f4f8;
            color: #2980b9;
        }}
        .legal {{
            background-color: #f8f4e8;
            color: #d35400;
        }}
        .footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 0.8em;
            color: #7f8c8d;
        }}
        /* Add styles for search */
        .search-container {{
            margin-bottom: 20px;
        }}
        #search-input {{
            padding: 8px;
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }}
        #search-button {{
            padding: 8px 15px;
            background-color: #2c3e50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }}
        .highlight {{
            background-color: yellow;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{title} Taxonomy</h1>
        
        <div class="metadata">
            <div class="metadata-item"><strong>Generated:</strong> {generated_at}</div>
            <div class="metadata-item"><strong>Jurisdictions:</strong> {jurisdictions}</div>
            <div class="metadata-item"><strong>Model:</strong> {model}</div>
            <div class="metadata-item"><strong>Max Depth:</strong> {max_depth}</div>
            <div class="metadata-item"><strong>Breadth Limit:</strong> {breadth_limit}</div>
            <div class="metadata-item"><strong>Strategy:</strong> {strategy}</div>
            <div class="metadata-item"><strong>Total Categories:</strong> {total_categories}</div>
        </div>
        
        <div class="search-container">
            <input type="text" id="search-input" placeholder="Search in taxonomy...">
            <button id="search-button">Search</button>
        </div>
        
        <div class="tree">
            {tree_html}
        </div>
        
        <div class="footer">
            Generated by Taxonomy Planner on {current_date}
        </div>
    </div>
    
    <script>
        // Add toggle functionality
        document.addEventListener('DOMContentLoaded', function() {{
            const categories = document.querySelectorAll('.category');
            categories.forEach(category => {{
                category.addEventListener('click', function() {{
                    this.classList.toggle('open');
                }});
            }});
            
            // Add search functionality
            const searchButton = document.getElementById('search-button');
            const searchInput = document.getElementById('search-input');
            
            searchButton.addEventListener('click', function() {{
                search();
            }});
            
            searchInput.addEventListener('keypress', function(e) {{
                if (e.key === 'Enter') {{
                    search();
                }}
            }});
            
            function search() {{
                // Remove existing highlights
                const highlighted = document.querySelectorAll('.highlight');
                highlighted.forEach(el => {{
                    el.classList.remove('highlight');
                }});
                
                const searchTerm = searchInput.value.toLowerCase();
                if (!searchTerm) return;
                
                // Find all nodes that contain the search term
                const allNodes = document.querySelectorAll('.category, .compliance, .legal');
                let firstMatch = null;
                
                allNodes.forEach(node => {{
                    if (node.textContent.toLowerCase().includes(searchTerm)) {{
                        node.classList.add('highlight');
                        
                        // Open all parent nodes
                        let parent = node.parentElement;
                        while (parent) {{
                            const category = parent.querySelector('.category');
                            if (category) {{
                                category.classList.add('open');
                            }}
                            parent = parent.parentElement ? parent.parentElement.parentElement : null;
                        }}
                        
                        if (!firstMatch) {{
                            firstMatch = node;
                        }}
                    }}
                }});
                
                // Scroll to the first match
                if (firstMatch) {{
                    firstMatch.scrollIntoView({{ behavior: 'smooth', block: 'center' }});
                }}
            }}
        }});
    </script>
</body>
</html>
"""

def generate_tree_html(node: Dict[str, Any], level: int = 0) -> str:
    """Generate HTML for the taxonomy tree.
    
    Args:
        node: Taxonomy node
        level: Current depth level
        
    Returns:
        HTML string for the tree
    """
    # Get node name
    name = node.get("name", "Unknown Category")
    
    # Start with an empty string
    html = ""
    
    # Add category
    html += f'<li><span class="category">{name}</span>\n'
    
    # Add compliance information if available
    if "compliance" in node and node["compliance"]:
        html += '<div class="compliance">\n'
        html += f'<strong>Compliance:</strong> '
        if isinstance(node["compliance"], dict):
            # Format for structured compliance data
            for jurisdiction, info in node["compliance"].items():
                if isinstance(info, str):
                    html += f'{jurisdiction}: {info}<br>'
                elif isinstance(info, list):
                    html += f'{jurisdiction}: {", ".join(info)}<br>'
                elif isinstance(info, dict) and "regulatory_body" in info:
                    # Format for newer compliance structure with regulatory body
                    html += f'{jurisdiction} - {info.get("regulatory_body", "")}: {info.get("standards", "")}<br>'
        elif isinstance(node["compliance"], list):
            # Format for list of compliance requirements
            html += ", ".join(node["compliance"])
        elif isinstance(node["compliance"], str):
            # Format for string compliance
            html += node["compliance"]
        html += '</div>\n'
    
    # Add legal information if available
    if "legal" in node and node["legal"]:
        html += '<div class="legal">\n'
        html += f'<strong>Legal:</strong> '
        if isinstance(node["legal"], dict):
            # Format for structured legal data
            for jurisdiction, info in node["legal"].items():
                if isinstance(info, str):
                    html += f'{jurisdiction}: {info}<br>'
                elif isinstance(info, list):
                    html += f'{jurisdiction}: {", ".join(info)}<br>'
                elif isinstance(info, dict) and "requirements" in info:
                    # Format for newer legal structure with requirements
                    html += f'{jurisdiction}: {info.get("requirements", "")}<br>'
        elif isinstance(node["legal"], list):
            # Format for list of legal requirements
            html += ", ".join(node["legal"])
        elif isinstance(node["legal"], str):
            # Format for string legal
            html += node["legal"]
        html += '</div>\n'
    
    # Add subcategories if available
    if "subcategories" in node and node["subcategories"]:
        html += '<ul class="subcategories">\n'
        for subcategory in node["subcategories"]:
            html += generate_tree_html(subcategory, level + 1)
        html += '</ul>\n'
    
    # Close the list item
    html += '</li>\n'
    
    return html

def count_categories(node: Dict[str, Any]) -> int:
    """Count total number of categories in the taxonomy.
    
    Args:
        node: Taxonomy node
        
    Returns:
        Total number of categories
    """
    count = 1  # Count current node
    
    if "subcategories" in node and node["subcategories"]:
        for subcategory in node["subcategories"]:
            count += count_categories(subcategory)
    
    return count

def visualize_taxonomy(taxonomy_file: str, output_file: Optional[str] = None) -> str:
    """Visualize a taxonomy file as an interactive HTML tree view.
    
    Args:
        taxonomy_file: Path to the taxonomy JSON file
        output_file: Path to save the HTML output (optional)
        
    Returns:
        Path to the generated HTML file
    """
    if not os.path.exists(taxonomy_file):
        raise FileNotFoundError(f"Taxonomy file not found: {taxonomy_file}")
    
    # Load taxonomy
    with open(taxonomy_file, 'r') as f:
        taxonomy = json.load(f)
    
    # Generate tree HTML
    tree_html = '<ul>\n' + generate_tree_html(taxonomy) + '</ul>\n'
    
    # Count total categories
    total_categories = count_categories(taxonomy)
    
    # Get metadata
    metadata = taxonomy.get("metadata", {})
    generated_at = metadata.get("generated_at", "Unknown")
    model = metadata.get("model", "Unknown")
    max_depth = metadata.get("max_depth", "Unknown")
    breadth_limit = metadata.get("breadth_limit", "Unknown")
    strategy = metadata.get("strategy", "Unknown")
    jurisdictions = ", ".join(metadata.get("jurisdictions", ["Unknown"]))
    
    # Get title from the root category name
    title = taxonomy.get("name", "Taxonomy")
    
    # Generate HTML with the template
    html = HTML_TEMPLATE.format(
        title=title,
        generated_at=generated_at,
        jurisdictions=jurisdictions,
        model=model,
        max_depth=max_depth,
        breadth_limit=breadth_limit,
        strategy=strategy,
        total_categories=total_categories,
        tree_html=tree_html,
        current_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    
    # Set default output file if not provided
    if not output_file:
        output_dir = os.path.join(os.path.dirname(taxonomy_file), "html")
        os.makedirs(output_dir, exist_ok=True)
        output_file = os.path.join(output_dir, os.path.basename(taxonomy_file).replace(".json", ".html"))
    
    # Save HTML to file
    with open(output_file, 'w') as f:
        f.write(html)
    
    logger.info(f"Generated HTML visualization at {output_file}")
    
    return output_file

def main():
    """Parse arguments and run the visualization."""
    parser = argparse.ArgumentParser(description="Visualize taxonomy as an interactive HTML tree")
    
    parser.add_argument(
        "taxonomy_file",
        help="Path to the taxonomy JSON file"
    )
    
    parser.add_argument(
        "--output",
        help="Path to save the HTML output",
        default=None
    )
    
    args = parser.parse_args()
    
    try:
        output_file = visualize_taxonomy(args.taxonomy_file, args.output)
        logger.info(f"Visualization complete! Open {output_file} in a web browser to view.")
        
    except Exception as e:
        logger.error(f"Error visualizing taxonomy: {e}")
        raise

if __name__ == "__main__":
    main()